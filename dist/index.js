// Generated by CoffeeScript 1.12.3
(function() {
  var Mongo_store, app, auth, body_parser, connect_mongo, cookie_parser, express, json_parser, mongo, mongo_client, pry, session, update_talker, utils, web_socket, ws, ws_dep;

  express = require('express');

  mongo = require('mongodb');

  utils = require('./helpers/http_utils');

  web_socket = require('./web_socket');

  body_parser = require('body-parser');

  cookie_parser = require('cookie-parser');

  session = require('express-session');

  connect_mongo = require('connect-mongo');

  Mongo_store = connect_mongo(session);

  ws_dep = require('ws');

  ws = new ws_dep.Server({
    port: 2345,
    perfMessageDeflate: false
  });

  pry = require('pryjs');

  app = express();

  json_parser = body_parser.json();

  auth = (function(_this) {
    return function(req, res, next) {
      console.log("AUTH SESSION %j", req.session);
      if (req.session && req.session.user) {
        return next();
      } else {
        return res.sendStatus(401);
      }
    };
  })(this);

  ws.broadcast = (function(_this) {
    return function(data) {
      return ws.clients.forEach(function(client) {
        console.log("broadcasting to client: %j", client);
        if (client.readyState === ws_dep.OPEN) {
          return client.send(data);
        }
      });
    };
  })(this);

  ws.room_cast = (function(_this) {
    return function(db, room) {
      var all_talkers, talkers;
      talkers = db.collection('talkers');
      all_talkers = talkers.find();
      eval(pry.it);
      return ws.clients.forEach(function(client) {
        var talker, unique_id;
        unique_id = client.upgradeReq.headers['sec-websocket-key'];
        return talker = all_talkers.unique_id;
      });
    };
  })(this);

  update_talker = (function(_this) {
    return function(db, talker, room) {
      var doc, talkers;
      talkers = db.collection('talkers');
      doc = {
        name: talker
      };
      if (room) {
        doc.room = room;
      }
      return talkers.update(doc, doc, {
        upsert: true
      });
    };
  })(this);

  mongo_client = mongo.MongoClient;

  mongo_client.connect('mongodb://localhost:27017/app', function(err, db) {
    var session_params, store;
    store = new Mongo_store({
      db: db
    });
    session_params = {
      resave: true,
      secret: 'majamcjaja',
      saveUninitialized: false,
      store: store,
      cookie: {
        httpOnly: false,
        maxAge: 900000000,
        secure: false
      }
    };
    app.use(session(session_params));
    app.use(express["static"]('static'));
    app.post('/new-user', json_parser, function(req, res) {
      return utils.handle_new_user(req, res, db);
    });
    app.post('/new-room', auth, json_parser, function(req, res) {
      return utils.handle_new_room(req, res, db);
    });
    app.post('/login', json_parser, function(req, res) {
      return utils.handle_login(req, res, db);
    });
    app.get('/logout', auth, function(req, res) {
      return utils.handle_logout(req, res, db);
    });
    ws.on('connection', (function(_this) {
      return function(socket) {
        update_talker(db, socket.upgradeReq.headers['sec-websocket-key']);
        return socket.on('message', function(msg) {
          var data, message;
          data = JSON.parse(msg);
          if (data.join_req) {
            update_talker(db, socket.upgradeReq.headers['sec-websocket-key'], data.join_req);
            message = JSON.stringify({
              join: data.join_req
            });
            socket.send(message);
          }
          if (data.room_msg) {
            ws.room_cast(db, data.room, data.room_msg);
          }
          return socket.send("Welcome " + data.user);
        });
      };
    })(this));
    setInterval((function(_this) {
      return function() {
        var rooms;
        rooms = db.collection('rooms');
        return rooms.find().toArray(function(err, coll) {
          var msg;
          msg = JSON.stringify({
            rooms: coll
          });
          return ws.broadcast(msg);
        });
      };
    })(this), 5000);
    return app.listen(1234, function() {
      return console.log((new Date) + " Server is listening on port 1234");
    });
  });

}).call(this);
